%--------------------------------------------------------------------------
\chapter{Research using High Performance Computing}
%--------------------------------------------------------------------------

%--------------------------------------------------------------------------
\section{Setting Up Computing Environment}
%--------------------------------------------------------------------------


%%--------------------------------------------------------------------------
%\subsection{Suggested Reading}
%%--------------------------------------------------------------------------


%The online encyclopedia \href{http://www.wikipedia.org/}{wikipedia} 
%has become an excellent resource for technical knowledge. 

%\href{http://en.wikipedia.org/wiki/Statistical_mechanics}
%{Statistical Mechanics}/
%\href{http://en.wikipedia.org/wiki/Condensed_matter}
%{Condensed Matter}
%\cite{ashcroft_solid_1976,mcquarrie_statistical_2000}

%\href{http://en.wikipedia.org/wiki/Phonon}
%{Lattice Dynamics} with focus on the classical, quantum 
%and thermodynamic properties of phonons.\cite{peierls_,ziman,
%wallace_thermodynamics_1976,
%srivastava_1990,dove_lattice_1993} 

%\href{http://en.wikipedia.org/wiki/Introduction_to_quantum_mechanics}{Introduction to quantum mechanics and quantum chemistry}
%\cite{griffiths_introduction_1995} 
%and more 
%advanced topics on 
%\href{https://en.wikipedia.org/wiki/Electron_configuration}
%{Electron Strucutre} and 
%\href{http://en.wikipedia.org/wiki/Density_functional_theory}
%{Density Functional Theory}.
%\cite{martin_electronic_2004} 

%Analytical methods for 
%\href{http://en.wikipedia.org/wiki/Ordinary_differential_equations}
%{ordinary} and 
%\href{http://en.wikipedia.org/wiki/Partial_differential_equation}
%{partial differential equations}, 
%\href{http://en.wikipedia.org/wiki/Fourier_analysis}
%{fourier} and 
%\href{http://en.wikipedia.org/wiki/Statistics}
%{statistical analysis},\cite{mcquarrie_mathematical_2003} 
%and 
%\href{http://en.wikipedia.org/wiki/Numerical_analysis}
%{numerical analysis}.\cite{moin_fundamentals_2010} For example, 
%the LJ MD code discussed in Section uses a  
%\href{http://en.wikipedia.org/wiki/Verlet_integration}
%{verlet integration method}. 

%--------------------------------------------------------------------------
\subsection{Hardware and Operating System Choice}
%--------------------------------------------------------------------------

The choice of hardware determines the operating system. The three 
main choices for operating system are Windows, Apple OS, and Linux. Each 
operating system has limitations depending on the hardware it 
operates on.   
For example, Apple OS is primarily used on Apple hardware.

\href{http://www.youtube.com/watch?v=7XTHdcmjenI}
{Linux: world's most widely used software}
Linux runs on cell phones to the world's largest supercomputers. 
Reccomend the most widely used linux version 
\href{http://www.ubuntu.com/}{ubuntu}.
well-documented, large-community discussion
Apple OS is an adequate substitute as it is 
\href{https://en.wikipedia.org/wiki/Unix-like}{unix-like}.

There are many options for installing Ubuntu and the instructions 
can be found on \href{http://www.ubuntu.com/}{http://www.ubuntu.com/}.
Ubuntu is certified on 
\href{http://www.ubuntu.com/certification/}
{many top PC's from many computer companies}
and a company, \href{https://www.system76.com/}{system 76}, 
builds computers with Ubuntu pre-installed. I used the 
\href{https://www.system76.com/laptops/model/panp9}
{Pangolin Performance} for over a year of my PhD.  However, 
I reccomend using the lightest, most-portable, and longest-battery 
life notebook available such as the 
\href{https://help.ubuntu.com/community/SamsungSeries9}
{Samsung Series 9}  
or \href{https://help.ubuntu.com/community/MacBookAir}{Macbook Air}. 
You will typically be using this notebook to access large computing 
clusters remotely, 
so there is a benefit of having portability and long 
battery life over large computational power.  

%--------------------------------------------------------------------------
\subsection{System Terminal and Commands}
%--------------------------------------------------------------------------

These instructions work best for Ubuntu operating system, and will work 
well for other versions of Linux. Systems commands are executed by the 
system 
\href{https://help.ubuntu.com/community/UsingTheTerminal}{terminal}. 


Useful Linux Commands:

sed, grep, ls, cd, pwd, export, setenv, scp -r, ssh, sudo, nohup, 
vi, cat, which, echo

\href{https://www.google.com/search?q=linux+sed}
{google: linux sed} 

%--------------------------------------------------------------------------
\subsection{Environment Variables}
%--------------------------------------------------------------------------

\href{http://en.wikipedia.org/wiki/Environment_variable}
{environment variable} such as $\$$PATH.  Here is how we determine what 
PATH is set to:


Set PATH for lammps (see Section ).


Permanent changes to environment variables can be made in the user's 
.bashrc file, which is typically located in the /home/user/ directory. 
The .bashrc file is a hidden file noted by its name starting with ".". 
Other

Here is an example .bashrc which demonstrates how to add permanent paths 
and how to define new functions within the operating system. 
For example, to copy the output of the pwd command to the system's 
clipboard, use cpyc then "ctrl-v" elsewhere. 

This file modifies environment variables such as 
\href{https://help.ubuntu.com/community/EnvironmentVariables}{PATH}  
when a bash terminal session is launched. Changes to environment 
variables are made when a new terminal session is started. The 
location of this file is typically: /home/user/.bashrc.  The 

\href{https://gist.github.com/kparrish/6064111}{.bashrc} from 
Kevin Parrish.

%--------------------------------------------------------------------------
\subsection{Shell Scripts and System Commands in Python}
%--------------------------------------------------------------------------

Shell scripts are relatively low-level scripts which execute system 
commands (Section ) and 
manipulate environment variables (Section )   
of the Linux operating system. 

Here is a simple tutorial on writing shell scripts 
\href{http://linuxcommand.org/wss0010.php}
{http://linuxcommand.org/wss0010.php}

Running Linux system commands in Python can be an effective way of 
generating and manipulating many files with one script. Python 
is a more robust language than lower-level shell scripting. 
Here is an example:

lmp.in.iseed

%--------------------------------------------------------------------------
\subsection{Remote Resources Commands}
%--------------------------------------------------------------------------

At some point during research you will need to excecute code on remote 
resources which are typically large ($\gt 100$ cpu) computing clusters. 
You will be provided with a terminal session similar to the session 
provided by Ubuntu with most of the same system commands. 

While I recommend 
\href{https://filezilla-project.org/}{Filezilla} 
for handling the transfer of data and files, 
the functionality of Filezilla is contained in several shell 
commands:

ssh user@gilgamesh.cheme.cmu.edu

or equivalently by the machine's ip address:

ssh user@xxx.xxx.xxx.xxx

Files can be transferred using the following command:

scp -r user@gilgamesh.cheme.cmu.edu:/home/user/directory/ ./

which will place the "directory" and its contents into the pwd (./) 
of the local terminal session. 

There are many variants of the operating systems used for remote 
computing clusters, but the differences are usually superficial. 
During my work I used the 
\href{http://gilgamesh.cheme.cmu.edu/doc/gilgamesh.html}
{gilgamesh} computing cluster maintained by 
\href{https://github.com/jkitchin}{John Kitchin}. 
\href{http://gilgamesh.cheme.cmu.edu/doc/gilgamesh.html}
{Gilgamesh's documentation} is a good resource for learning how to run 
calculations on a computing cluster.

%--------------------------------------------------------------------------
\subsection{Installing Programs}
%--------------------------------------------------------------------------

Ubuntu and similar linux OS have automatic software installation and 
management using the apt-get system command:

jason@jason-900X3C ~/ (master) $\$$ sudo apt-get install gfortran
[sudo] password for jason: 
Reading package lists... Done
Building dependency tree       
Reading state information... Done
gfortran is already the newest version.
The following package was automatically installed and is no longer required:
  kde-l10n-engb
Use 'apt-get autoremove' to remove it.
0 upgraded, 0 newly installed, 0 to remove and 129 not upgraded.

To check that the package has been installed, use:

jason@jason-900X3C-900X3D-900X3E-900X4C-900X4D ~/ (master) $\$$ which gfortran
/usr/bin/gfortran

This shows that gfortran program is installed in the /usr/bin/ folder, 
a common location where automatically installed programs are located. 
Because the 
folder /usr/bin is in the PATH environment variable:


the program gfortran is always available no matter where you are in 
the system terminal. 

To get more information about the gfortran, use:

jason@jason-900X3C ~/ (master) $\$$ ls -l /usr/bin/gfortran
lrwxrwxrwx 1 root root 12 Apr 22 03:44 /usr/bin/gfortran -> gfortran-4.7

where we see that /usr/bin/gfrotran "points" to gfortran-4.7. 
This is called a symbolic link, which can be created using:

jason@jason-900X3C ~/disorder/pcbm/topotools-tutorial-part2 (master) $\$$ ls -l /usr/bin/gfortran
lrwxrwxrwx 1 root root 12 Apr 22 03:44 /usr/bin/gfortran -> gfortran-4.7

%--------------------------------------------------------------------------
\subsection{Available Programs}
%--------------------------------------------------------------------------

Available progams represent oppurtunities to perform research quickly and 
easily. I suggest you read their documentation carefully and try the 
tutorials which are typically computationally inexpensive. 

Install lammps:

Set PATH for lammps

gnu compilers vs intel: gnu freely available
tar -zxvf lammps.tar, make serial, sudo apt-get install openmpi, make openmpi

open-source: 

\href{http://lammps.sandia.gov/}{LAMMPS}, including the particularly 
useful 
\href{http://lammps.sandia.gov/threads/threads.html}{mailing list} 
(use ctrl-f to search on any topic)  
and
\href{http://lammps.sandia.gov/doc/Section_python.html}
{python interface} which is used with the package 
\href{http://github.com/ntpl/ntpy}{ntpy}. 
\href{http://projects.ivec.org/gulp/}{GULP}, 
\href{http://www.abinit.org/}{ABINIT}, 
\href{http://www.quantum-espresso.org/}{Quantum Espresso}, 
\href{http://jp-minerals.org/vesta/en/}{VESTA}, 
\href{http://phonopy.sourceforge.net/}{phonopy}, 
\href{http://www.ks.uiuc.edu/Research/vmd/}{VMD} 
(with 
\href{https://sites.google.com/site/akohlmey/software/topotools}
{topotools})
\href{http://github.com/ntpl/ntpy}{ntpy},
\href{https://www.vasp.at/}{VASP}
\href{http://www.stfc.ac.uk/CSE/randd/ccg/software/DL_POLY/25526.aspx}
{DL_POLY}, 
\href{http://icmab.cat/leem/siesta/}
{siesta}, 
\href{http://www.msg.ameslab.gov/gamess/}{GAMESS}, 
\href{http://www.cp2k.org/}{CP2K}, 
\href{http://www.icams.de/content/departments/ams/madsen/boltztrap.html}{BOLTZTRAP}, 
\href{http://www.homepages.ucl.ac.uk/~ucfbdxa/phon/}{PHON}, 

I reccomend trying this 
\href{https://gist.github.com/kparrish/6064159}{install.sh} created by 
\href{http://www.github.com/kparrish}{Kevin Parrish} which installs 
many programs and packages, including lammps for parallel computing 
with openmpi.

%--------------------------------------------------------------------------
\section{Preparing Journal Articles and Thesis}
%--------------------------------------------------------------------------

reccomendation: student advisor should try and exchange editing a written 
research documen at least every week. The exchange of such a document 

Such a research document could be the running 
collection of journal articles which turn into the thesis. Maintenance 
of this document can be achieved with 
\href{https://www.dropbox.com/}{Dropbox} or 
Github. 
Github offers to advantage of smart version control and a built-in 
wiki. 



%--------------------------------------------------------------------------
\subsection{Journal Articles}
%--------------------------------------------------------------------------

The job of the student is to prepare, submit, and publish 
peer-reviewed journal articles. There are many journals suitable for 
nanoscale transport topics. All of them accept 
\href{http://www.latex-project.org/}{Latex} prepared manuscripts. 
I recommend the Latex editor 
\href{http://kile.sourceforge.net/}{Kile}, while the simple 
\href{https://projects.gnome.org/gedit/}{gedit} works well and comes 
pre-installed with Ubuntu. Here is a 
\href{http://mally.stanford.edu/~sr/computing/latex-example.html}
{simple latex example} and how to generate a 
\href{http://tex.stackexchange.com/questions/1596/how-to-compile-a-latex-document}
{portable document format (PDF)} from the latex document.  

To maintain the reference library I 
recommend 
\href{http://www.zotero.org/}{zotero}.  Here is an example 
\href{}{reference.bib} 
file which is exported automatically by zotero. 
The references are generated from the latex document using 
\href{http://www.bibtex.org/Using/}{bibtex} which compiles the contents of 
the reference.bib.

Here is an example of the latex files 
used to create an article published from this work:

\href{https://github.com/jasonlarkin/thesis/tree/master/thesis}
{Predicting alloy properties}.

This file uses 
\href{http://publish.aps.org/revtex}{revtex}, 
which is an article class used by Physical Review, 
Journal of Applied Physics, and others.

%--------------------------------------------------------------------------
\subsection{Thesis}
%--------------------------------------------------------------------------

These can be used as templates

Here is a Carnegie Mellon thesis template:

\href{https://github.com/robsimmons/cmu-thesis}
{https://github.com/robsimmons/cmu-thesis}

\href{https://github.com/jasonlarkin/thesis/tree/master/thesis}
{J. Larkin thesis files}.

\href{http://web.science.mq.edu.au/~rdale/resources/writingnotes/latexstruct.html}
{Article on structuring large documents.}

%2) Computational cost of each paper
%CPU, memory
%parallel cpu, parallel memory
%Trends: 
%small single cpu jobs -> large parallel cpu jobs
%single predictive method -> several predictive methods
%reccomendation: explore all predictive methods and models possible

%--------------------------------------------------------------------------
\subsection{Producing Figures}
%--------------------------------------------------------------------------

Python has a plotting module, \href{http://matplotlib.org/}{matplotlib}, 
which has \href{http://matplotlib.org/examples/index.html}{many examples}. 
Here is a \href{https://gist.github.com/kparrish/6101681}{simple example 
demonstrating how to generate and save data, load that data, and plot.} 


\href{https://github.com/ntpl/ntpy/tree/master/examples/thesis}
{Here is a simple example demonstrating how to }

%--------------------------------------------------------------------------
\section{Technical Advice}
%--------------------------------------------------------------------------

In addition to your advisor and close mentors, 
I reccomend communicating with experts in the field as much as 
possible without being an annoying.  How often to 
communicate depends on the situation. 
It is best to let the expert dictate the pace of the conversation. 

%--------------------------------------------------------------------------
\subsection{Expert Advice}
%--------------------------------------------------------------------------

Here is a list of experts I used as resources for this work. They 
will typically answer emails within 24-48 hours:


\href{http://ntpl.me.cmu.edu/people.html}
{Alan McGaughey},
\href{http://www.cmu.edu/me/malen/Lab_Website/People.html}
{Jon Malen},
\href{http://chemistry.curtin.edu.au/people/academic.cfm/J.Gale}
{Julian Gale} 
\href{http://projects.ivec.org/gulp/news.html}
{(GULP author)},
\href{http://mech.rutgers.edu/content/keivan-esfarjani}
{Keivan Esfarjani},
normand.mousseau@umontreal.ca,
guido.raos@polimi.it,
\href{mailto:joseph.feldman.ctr@nrl.navy.mil}
{Joseph Feldman},
\href{http://www.phonon.t.u-tokyo.ac.jp/}
{Junchiro Shiomi},
\href{http://www2.mpip-mainz.mpg.de/~donadio/tnt/People.html}
{Davide Donadio},
\href{http://www.ce.cmu.edu/people/faculty/maloney.html}
{Craig Maloney},
\href{http://quasiamore.mit.edu/pmwiki.php?n=Main.JivteshGarg}
{Jivtesh Garg},
\href{John Duda}
{John Duda},
\href{Wissam Al-Saidi}
{Wissam Al-Saidi},
\href{Dan Sellan}
{Dan Sellan},
\href{Ankit Jain}
{Ankit Jain},
\href{wong@andrew.cmu.edu}
{Wee-Liat Ong},
\href{John Kitchin}
{John Kitchin},
Steve Plimpton via the 
\href{http://lammps.sandia.gov/threads/threads.html}{LAMMPS mailing list} 
Axel Kolhmeyer via the 
\href{http://lammps.sandia.gov/threads/threads.html}{LAMMPS mailing list} 
and \href{akohlmey@gmail.com}{email}

\href{http://atztogo.users.sourceforge.net/}{Atz Togo}, creator of 
\href{http://phonopy.sourceforge.net/}{phonopy}

\href{http://jasonlarkin.github.io}{me}

%--------------------------------------------------------------------------
\subsection{Online Resources}
%--------------------------------------------------------------------------

wikipedia

\href{http://www.sklogwiki.org/SklogWiki/index.php/Main_Page}
{octave}

https://en.wikipedia.org/wiki/Lennard-Jones_potential

http://www.sklogwiki.org/SklogWiki/index.php/Lennard-Jones_model

we can do better, needs to be organization. 

http://nanohub.org/

does not provide good HPC resources. 


%--------------------------------------------------------------------------
\section{Coding Languages: Compiled versus Interpreted}
%--------------------------------------------------------------------------

There are many languages 
used for the open-source and lisenced packages(REF) that can be used 
to study nanoscale transport. These packages use 
\href{http://en.wikipedia.org/wiki/Compiled_language}{compiled} and 
\href{http://en.wikipedia.org/wiki/Interpreted_language}{interpreted}  
languages and often a miture of the two.

The most commonly used compiled languages are 
\href{https://en.wikipedia.org/wiki/C\%2B\%2B}{C/C++} 
(linux, LAMMPS) 
and 
\href{http://en.wikipedia.org/wiki/Fortran}{Fortran}
(GULP, quantum espresso, VASP).

A good discussion on 
\href{http://stackoverflow.com/questions/13078736/fortran-vs-c-does-fortran-still-hold-any-advantage-in-numerical-analysis-thes}
{the strengths of C++ versus Fortran}.

\href{http://www.youtube.com/watch?v=XFQ9dw3CyDo&list=PL1D10C030FDCE7CE0}
{excellent c++ tutorial}

\href{http://www.youtube.com/watch?v=YRTEOFMUTzw&list=PL6A8E21D2E86A0155}
{excellent fortran tutorial}


The two interpreted languages you are likely to use are 
\href{http://en.wikipedia.org/wiki/MATLAB}{matlab}  
and 
\href{http://en.wikipedia.org/wiki/Python_(programming_language)}{python}.

The key to maximizing the potential of interpreted languages is by 
using the built-in ``vector'' functions and operations provided by the 
\href{http://www.mathworks.com/help/matlab/matlab_prog/vectorization.html}
{matlab}  
and 
\href{http://faculty.washington.edu/rjl/uwamath583s11/sphinx/notes/html/python_vect.html}
{python}  
programming libraries.

matlab has an excellent built-in guide, google search will typically 
yield useful results. A good open-source substitute for matlab is 
\href{http://www.gnu.org/software/octave/}
{octave} which is capable to running most matlab scripts.

%--------------------------------------------------------------------------
\subsection{Compiled Language Case-study: Lennard-Jones Argon Molecular Dynamics}
%--------------------------------------------------------------------------

The first case study is a 
\href{https://github.com/jasonlarkin/classes/tree/master/cmu/molecular_simulation/HW5}
{single C code to perform Molecular Dynamics 
on LJ argon}. The code is a serial code with 

/home/jason/classes/cmu/molecular_simulation/HW5

\lstset{language=Shell}
\begin{lstlisting}[label=some-code,caption=Some Code]
jason@jason-900X3C ~/classes/cmu/molecular_simulation/HW5 (master) c++ ArgonMD.cpp -o ArgonMD
\end{lstlisting}

\lstset{language=Shell}
\begin{lstlisting}[label=some-code,caption=Some Code]
jason@jason-900X3C ~/classes/cmu/molecular_simulation/HW5 (master) ./ArgonMD
\end{lstlisting}

The output is.  A useful shell operation is 
\href{http://www.linfo.org/pipes.html}{"piping"}, which is demonstrated below:

\lstset{language=Shell}
\begin{lstlisting}[label=some-code,caption=Some Code]
jason@jason-900X3C ~/classes/cmu/molecular_simulation/HW5 (master) $ ./ArgonMD > props_piped.txt
\end{lstlisting}

Another useful shell command is 
\href{http://www.tuxfiles.org/linuxhelp/vimcheat.html}{"vi"}, a 
shell-based text editor:
\lstset{language=Shell}
\begin{lstlisting}[label=some-code,caption=Some Code]
jason@jason-900X3C ~/classes/cmu/molecular_simulation/HW5 (master) $ vi props_piped.txt
5.61358 2.01864 5.26596
3.4073  1.72339 1.32187
5.28007 0.107792        4.95407
1.45285 5.09976 0.961697
4.5679  4.82261 5.78293
5.29423 0.880753        0.709709
3.63248 5.45978 2.70637
...
\end{lstlisting}

%--------------------------------------------------------------------------
\subsection{Compiled versus Interpreted Case-study(a): Lennard-Jones Dispersion}
%--------------------------------------------------------------------------

With interpreted languages traditional programming practice of using 
loops (for/do/while, etc) will slow the code down.  

Matlab version using mixture of loops and vectorized functions.

Fortran version (GULP) 

%--------------------------------------------------------------------------
\subsection{Compiled versus Interpreted Case-study(b): Allen-Feldman Diffusivity Calculation}
%--------------------------------------------------------------------------

Two systems, my local laptop:

http://www.samsung.com/us/computer/series-9-notebooks

\lstset{language=Shell}
\begin{lstlisting}[label=some-code,caption=Some Code]
jason@jason-900X3C ~/disorder (master) $\$$ cat /proc/cpuinfo 
processor	: 0
vendor_id	: GenuineIntel
cpu family	: 6
model		: 58
model name	: Intel(R) Core(TM) i5-3317U CPU @ 1.70GHz
stepping	: 9
microcode	: 0x17
cpu MHz		: 782.000
cache size	: 3072 KB
physical id	: 0
siblings	: 4
core id		: 0
cpu cores	: 2
apicid		: 0
initial apicid	: 0
\end{lstlisting}


and gilgamesh

http://gilgamesh.cheme.cmu.edu/doc/gilgamesh.html

\lstset{language=Shell}
\begin{lstlisting}[label=some-code,caption=Some Code]
jason@gilgamesh > cat /proc/cpuinfo
processor	: 0
vendor_id	: AuthenticAMD
cpu family	: 16
model		: 9
model name	: AMD Opteron(tm) Processor 6128 HE
stepping	: 1
cpu MHz		: 2000.003
cache size	: 512 KB
physical id	: 1
siblings	: 8
core id		: 0
cpu cores	: 8
apicid		: 16
\end{lstlisting}

%--------------------------------------------------------------------------
\subsection{Scaling Calculations}
%--------------------------------------------------------------------------

The majority of the methods 
used in this work scale poorly with the number of atoms, $N_a^\alpha$ 
with $\alpha >1$. 

Let's take the scaling cost $N_a^3$, which is the scaling for 
eigenvalue solution used in Sections . 
The cost of performing this calculation for a large system size 
$N_{a,large}$  
and every succesive system which is half the size of the former 
is given by the 
\href{http://en.wikipedia.org/wiki/Geometric_series}{geometric series} 
with common ratio $r=1/8$
\begin{equation}\label{EQ:cost_total}
\begin{split}
cost_{total} = N_{a,large}\frac{1}{1-r} = 1.143N_{a,large} 
\end{split}
\end{equation}
It costs a minimal amount ($\~14\%$) to study every system smaller 
than the largest system considered. Even a linear scaling 
$N_a$ has $cost_{total} = 2N_{a,large}$. 
Because of this I recommend 
picking the system of maximum size and then start calcualtions with 
the smallest system of interest. 
Publication drafts can be 
developed mush faster by performing computationally cheap calculations 
first, documenting the results, and then iterating to more 
computationally expensive calculations. 
This scheme for performing calculations can follow these time-scales 
for calculation costs:  
one second, minute, hour, day, and week. I have performed 
countless calculations costing around one second and very few which cost 
more than one week. Publication quality results will typically 
cost between one hour and one week.

%--------------------------------------------------------------------------



%%--------------------------------------------------------------------------
%\subsection{Importance of Open-Source Code}
%%--------------------------------------------------------------------------

%LAMMPS Mailing List
%http://lammps.sandia.gov/threads/threads.html

%search: 

%lennard (jones)	45
%silicon		125
%nanotube	153
%ger


%Execellent discussion of ensembles and newtonian dynamics
%http://lammps.sandia.gov/threads/msg13979.htmlmanium	2
%silica		79
%carbon		181
%hydrogen	99
%fullerene(C60)	7(12)	
%Pb (lead)	2
%water		541
%copper(cu)	25
%gold		81
%diamond		43

%phase transition	21
%green kubo	18


%Execellent discussion of ensembles and newtonian dynamics
%http://lammps.sandia.gov/threads/msg13979.html

%video of python development tree

%\href{http://www.youtube.com/watch?v=3poNeQHUKrs}
%{google+ history with gource}

%\href{http://www.youtube.com/watch?v=cNBtDstOTmA}
%{python history with gource}

%grand-daddy of them all, 
%\href{http://www.youtube.com/watch?v=pOSqctHH9vY}
%{linux kernel history with gource}

%It is important that results become more open-source.  It's important 
%that our communication becomes open-source. It's important that the 
%entire numerical process be carried out open-source. 


%%--------------------------------------------------------------------------
%\subsection{Redundancy}
%%--------------------------------------------------------------------------
%
%There are 3 different codes (shiomi/esfarjani, broido, ankit) for 
%performing the same basic calculations.
%
%For LD, there is GULP, phonopy, SIESTA, etc.
%
%%--------------------------------------------------------------------------
%\subsection{Code Development}
%%--------------------------------------------------------------------------
%
%took ankit 10 months to re-develop esfarjani code.  
%
%code development time can be drastically reduced using pre-existing code. 
%codes written in a modular fashion can be added to easily.
%
%%--------------------------------------------------------------------------
%\subsection{Experiment Pre-dating Simulation}
%%--------------------------------------------------------------------------
%The ideal goal of simulation is to pre-date experiment.  This has not 
%been achieved yet.  See Fig.
%
%findings for:
%CNT/Graphene
%Si
%Thermoeletric (LUC, alloys, SL, etc)
%Perovskites
%PCM
%
%%--------------------------------------------------------------------------
%\subsection{Experiment Pre-dating Simulation}
%%--------------------------------------------------------------------------
%
%ntpl most cited paper 1-5:
%maradudin, ladd, dove, ziman, 

